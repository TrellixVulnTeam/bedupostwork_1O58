{"ast":null,"code":"var _defineProperty = require(\"/Users/begeistert/WebstormProjects/investment/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nclass Investment {\n  constructor(id, name, description, interest, startingAmount, finalAmount, startDate, endDate) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"interest\", void 0);\n\n    _defineProperty(this, \"startingAmount\", void 0);\n\n    _defineProperty(this, \"finalAmount\", void 0);\n\n    _defineProperty(this, \"startDate\", void 0);\n\n    _defineProperty(this, \"endDate\", void 0);\n\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.interest = interest;\n    this.startingAmount = startingAmount;\n    this.finalAmount = finalAmount;\n    this.startDate = startDate;\n    this.endDate = endDate;\n  }\n\n  static addInvestment(name, description, interest, startingAmount, startDate, duration, repository) {\n    const endDate = new Date(startDate.getTime());\n    endDate.setDate(endDate.getDate() + duration);\n\n    const finalAmount = Investment._calculateFinalAmount(interest, startingAmount, duration);\n\n    return new Investment(repository.getId(), name, description, interest, startingAmount, finalAmount, startDate, endDate);\n  }\n\n  static _calculateFinalAmount(interest, startingAmount, duration) {\n    const bankingYear = 360;\n    const interestAsPercentage = interest / 100;\n    return startingAmount * (1 + interestAsPercentage / bankingYear * duration);\n  }\n\n}\n\nmodule.exports = Investment;","map":{"version":3,"sources":["/Users/begeistert/WebstormProjects/investment/src/server/entities/Investment.js"],"names":["Investment","constructor","id","name","description","interest","startingAmount","finalAmount","startDate","endDate","addInvestment","duration","repository","Date","getTime","setDate","getDate","_calculateFinalAmount","getId","bankingYear","interestAsPercentage","module","exports"],"mappings":";;AAAA,MAAMA,UAAN,CAAiB;AAUbC,EAAAA,WAAW,CAACC,EAAD,EAAKC,IAAL,EAAWC,WAAX,EAAwBC,QAAxB,EAAkCC,cAAlC,EAAkDC,WAAlD,EAA+DC,SAA/D,EAA0EC,OAA1E,EAAmF;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC1F,SAAKP,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AAEmB,SAAbC,aAAa,CAACP,IAAD,EAAOC,WAAP,EAAoBC,QAApB,EAA8BC,cAA9B,EAA8CE,SAA9C,EAAyDG,QAAzD,EAAmEC,UAAnE,EAA+E;AAC/F,UAAMH,OAAO,GAAG,IAAII,IAAJ,CAASL,SAAS,CAACM,OAAV,EAAT,CAAhB;AACAL,IAAAA,OAAO,CAACM,OAAR,CAAgBN,OAAO,CAACO,OAAR,KAAoBL,QAApC;;AAEA,UAAMJ,WAAW,GAAGP,UAAU,CAACiB,qBAAX,CAAiCZ,QAAjC,EAA2CC,cAA3C,EAA2DK,QAA3D,CAApB;;AAEA,WAAO,IAAIX,UAAJ,CAAeY,UAAU,CAACM,KAAX,EAAf,EAAmCf,IAAnC,EAAyCC,WAAzC,EAAsDC,QAAtD,EAAgEC,cAAhE,EAAgFC,WAAhF,EAA6FC,SAA7F,EAAwGC,OAAxG,CAAP;AACH;;AAE2B,SAArBQ,qBAAqB,CAACZ,QAAD,EAAWC,cAAX,EAA2BK,QAA3B,EAAqC;AAC7D,UAAMQ,WAAW,GAAG,GAApB;AACA,UAAMC,oBAAoB,GAAGf,QAAQ,GAAG,GAAxC;AACA,WAAOC,cAAc,IAAI,IAAOc,oBAAD,GAAyBD,WAA1B,GAAyCR,QAAlD,CAArB;AACH;;AAlCY;;AAsCjBU,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["class Investment {\n    id;\n    name;\n    description;\n    interest;\n    startingAmount;\n    finalAmount;\n    startDate;\n    endDate;\n\n    constructor(id, name, description, interest, startingAmount, finalAmount, startDate, endDate) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.interest = interest;\n        this.startingAmount = startingAmount;\n        this.finalAmount = finalAmount;\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    static addInvestment(name, description, interest, startingAmount, startDate, duration, repository) {\n        const endDate = new Date(startDate.getTime());\n        endDate.setDate(endDate.getDate() + duration);\n\n        const finalAmount = Investment._calculateFinalAmount(interest, startingAmount, duration);\n\n        return new Investment(repository.getId(), name, description, interest, startingAmount, finalAmount, startDate, endDate)\n    }\n\n    static _calculateFinalAmount(interest, startingAmount, duration) {\n        const bankingYear = 360;\n        const interestAsPercentage = interest / 100;\n        return startingAmount * (1 + (((interestAsPercentage) / bankingYear) * duration));\n    }\n}\n\n\nmodule.exports = Investment;\n"]},"metadata":{},"sourceType":"script"}