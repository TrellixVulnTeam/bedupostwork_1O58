{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst Investment = require(\"./entities/Investment\");\n\nconst InvestmentRepository = require(\"./repositories/InvestmentRepository\");\n\nconst cors = require('cors');\n\nconst db = require(\"./database\");\n\nconst app = express();\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\napp.use(bodyParser.raw());\napp.use(cors());\napp.post('/add-investment', (req, res) => {\n  const investmentData = {\n    name: req.body.name,\n    description: req.body.description,\n    interest: req.body.interest,\n    startingAmount: req.body.startingAmount,\n    startDate: new Date(req.body.startDate),\n    duration: req.body.duration\n  };\n  const repository = new InvestmentRepository();\n  const investment = Investment.addInvestment(investmentData.name, investmentData.description, parseInt(investmentData.interest), parseInt(investmentData.startingAmount), investmentData.startDate, parseInt(investmentData.duration), repository);\n  console.log(investment);\n  repository.save(investment);\n  res.send(investment);\n});\napp.get('/returnDBValues', (req, res) => {\n  try {\n    const sql = `SELECT * FROM investment where id = '${req.query.id}'`;\n    const params = [];\n    db.get(sql, params, (err, result) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      console.log(result);\n      res.send(result);\n    });\n  } catch (err) {\n    return console.error(err.message);\n  }\n});\nmodule.exports = app;","map":{"version":3,"sources":["/Users/begeistert/WebstormProjects/investment/src/server/app.js"],"names":["express","require","bodyParser","Investment","InvestmentRepository","cors","db","app","use","urlencoded","extended","json","raw","post","req","res","investmentData","name","body","description","interest","startingAmount","startDate","Date","duration","repository","investment","addInvestment","parseInt","console","log","save","send","get","sql","query","id","params","err","result","error","message","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,qCAAD,CAApC;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,YAAD,CAAlB;;AAEA,MAAMM,GAAG,GAAGP,OAAO,EAAnB;AACAO,GAAG,CAACC,GAAJ,CAAQN,UAAU,CAACO,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAtB,CAAR;AACAH,GAAG,CAACC,GAAJ,CAAQN,UAAU,CAACS,IAAX,EAAR;AACAJ,GAAG,CAACC,GAAJ,CAAQN,UAAU,CAACU,GAAX,EAAR;AACAL,GAAG,CAACC,GAAJ,CAAQH,IAAI,EAAZ;AAGAE,GAAG,CAACM,IAAJ,CAAS,iBAAT,EAA4B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAEtC,QAAMC,cAAc,GAAG;AACnBC,IAAAA,IAAI,EAAEH,GAAG,CAACI,IAAJ,CAASD,IADI;AAEnBE,IAAAA,WAAW,EAAEL,GAAG,CAACI,IAAJ,CAASC,WAFH;AAGnBC,IAAAA,QAAQ,EAAEN,GAAG,CAACI,IAAJ,CAASE,QAHA;AAInBC,IAAAA,cAAc,EAAEP,GAAG,CAACI,IAAJ,CAASG,cAJN;AAKnBC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAST,GAAG,CAACI,IAAJ,CAASI,SAAlB,CALQ;AAMnBE,IAAAA,QAAQ,EAAEV,GAAG,CAACI,IAAJ,CAASM;AANA,GAAvB;AAQA,QAAMC,UAAU,GAAG,IAAIrB,oBAAJ,EAAnB;AAEA,QAAMsB,UAAU,GAAGvB,UAAU,CAACwB,aAAX,CAAyBX,cAAc,CAACC,IAAxC,EAA8CD,cAAc,CAACG,WAA7D,EAA0ES,QAAQ,CAACZ,cAAc,CAACI,QAAhB,CAAlF,EAA6GQ,QAAQ,CAACZ,cAAc,CAACK,cAAhB,CAArH,EAAsJL,cAAc,CAACM,SAArK,EAAgLM,QAAQ,CAACZ,cAAc,CAACQ,QAAhB,CAAxL,EAAmNC,UAAnN,CAAnB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACAD,EAAAA,UAAU,CAACM,IAAX,CAAgBL,UAAhB;AACAX,EAAAA,GAAG,CAACiB,IAAJ,CAASN,UAAT;AACH,CAhBD;AAkBAnB,GAAG,CAAC0B,GAAJ,CAAQ,iBAAR,EAA2B,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACtC,MAAG;AACC,UAAMmB,GAAG,GAAI,wCAAuCpB,GAAG,CAACqB,KAAJ,CAAUC,EAAG,GAAjE;AACA,UAAMC,MAAM,GAAG,EAAf;AACA/B,IAAAA,EAAE,CAAC2B,GAAH,CAAOC,GAAP,EAAYG,MAAZ,EAAoB,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACjC,UAAID,GAAJ,EAAS;AACLT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACA;AACH;;AACDT,MAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACAxB,MAAAA,GAAG,CAACiB,IAAJ,CAASO,MAAT;AACH,KAPD;AAQH,GAXD,CAWE,OAAOD,GAAP,EAAY;AACV,WAAOT,OAAO,CAACW,KAAR,CAAcF,GAAG,CAACG,OAAlB,CAAP;AACH;AACH,CAfD;AAkBAC,MAAM,CAACC,OAAP,GAAiBpC,GAAjB","sourcesContent":["const express = require('express')\nconst bodyParser = require('body-parser');\nconst Investment = require(\"./entities/Investment\");\nconst InvestmentRepository = require(\"./repositories/InvestmentRepository\");\nconst cors = require('cors');\nconst db = require(\"./database\");\n\nconst app = express();\napp.use(bodyParser.urlencoded({extended: true}))\napp.use(bodyParser.json())\napp.use(bodyParser.raw())\napp.use(cors())\n\n\napp.post('/add-investment', (req, res) => {\n\n    const investmentData = {\n        name: req.body.name,\n        description: req.body.description,\n        interest: req.body.interest,\n        startingAmount: req.body.startingAmount,\n        startDate: new Date(req.body.startDate),\n        duration: req.body.duration,\n    };\n    const repository = new InvestmentRepository()\n\n    const investment = Investment.addInvestment(investmentData.name, investmentData.description, parseInt(investmentData.interest), parseInt(investmentData.startingAmount), investmentData.startDate, parseInt(investmentData.duration), repository);\n    console.log(investment)\n    repository.save(investment)\n    res.send(investment);\n})\n\napp.get('/returnDBValues', (req, res) => {\n   try{\n       const sql = `SELECT * FROM investment where id = '${req.query.id}'`;\n       const params = [];\n       db.get(sql, params, (err, result) => {\n           if (err) {\n               console.log(err)\n               return;\n           }\n           console.log(result)\n           res.send(result);\n       })\n   } catch (err) {\n       return console.error(err.message);\n   }\n})\n\n\nmodule.exports = app;"]},"metadata":{},"sourceType":"script"}