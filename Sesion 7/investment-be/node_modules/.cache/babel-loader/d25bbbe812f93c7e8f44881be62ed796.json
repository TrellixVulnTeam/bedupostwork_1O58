{"ast":null,"code":"const InvestmentRepositoryContract = require(\"../repositories_contracts/InvestmentRepositoryContract\");\n\nconst {\n  v4: uuidv4\n} = require('uuid');\n\nconst db = require(\"../database\");\n\nclass InvestmentRepository extends InvestmentRepositoryContract {\n  constructor(dbConnection) {\n    super();\n    this.dbConnection = dbConnection;\n  }\n\n  getId() {\n    return uuidv4();\n  }\n\n  save(investment) {\n    const sql = \"INSERT INTO investment (id,name,description,interest,starting_amount,final_amount,start_date,end_date) VALUES (?,?,?,?,?,?,?,?)\";\n    const params = [investment.id, investment.name, investment.description, investment.interest, investment.startingAmount, investment.finalAmount, investment.startDate, investment.endDate];\n    db.run(sql, params, err => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      console.log('Sucess register generated: ' + investment.id);\n    });\n  }\n\n  async getInvestmentFromDB(id) {\n    const sql = `SELECT * FROM investment where id = '${id}'`;\n    const params = [];\n    console.log(sql);\n    await db.get(sql, params, (err, result) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      console.log(result);\n      return result;\n    });\n  }\n\n  ejercicioSesion07(PARAMETROCUALQUIERA) {\n    const sql = `SELECT * FROM investment where PARAMETROCUALQUIERA = '${PARAMETROCUALQUIERA}'`;\n    const params = [];\n    console.log(sql);\n    db.get(sql, params, (err, result) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      console.log(result);\n      return result;\n    });\n  }\n\n}\n\nmodule.exports = InvestmentRepository;","map":{"version":3,"sources":["/Users/begeistert/WebstormProjects/investment/src/server/repositories/InvestmentRepository.js"],"names":["InvestmentRepositoryContract","require","v4","uuidv4","db","InvestmentRepository","constructor","dbConnection","getId","save","investment","sql","params","id","name","description","interest","startingAmount","finalAmount","startDate","endDate","run","err","console","log","getInvestmentFromDB","get","result","ejercicioSesion07","PARAMETROCUALQUIERA","module","exports"],"mappings":"AAAA,MAAMA,4BAA4B,GAAGC,OAAO,CAAC,wDAAD,CAA5C;;AACA,MAAM;AAACC,EAAAA,EAAE,EAAEC;AAAL,IAAeF,OAAO,CAAC,MAAD,CAA5B;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,aAAD,CAAlB;;AAGA,MAAMI,oBAAN,SAAmCL,4BAAnC,CAAgE;AAC5DM,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB;AACA,SAAKA,YAAL,GAAoBA,YAApB;AACH;;AAEDC,EAAAA,KAAK,GAAG;AACJ,WAAOL,MAAM,EAAb;AACH;;AAGDM,EAAAA,IAAI,CAACC,UAAD,EAAa;AACb,UAAMC,GAAG,GAAG,iIAAZ;AACA,UAAMC,MAAM,GAAG,CAACF,UAAU,CAACG,EAAZ,EAAgBH,UAAU,CAACI,IAA3B,EAAiCJ,UAAU,CAACK,WAA5C,EAAyDL,UAAU,CAACM,QAApE,EAA8EN,UAAU,CAACO,cAAzF,EAAyGP,UAAU,CAACQ,WAApH,EAAiIR,UAAU,CAACS,SAA5I,EAAuJT,UAAU,CAACU,OAAlK,CAAf;AACAhB,IAAAA,EAAE,CAACiB,GAAH,CAAOV,GAAP,EAAYC,MAAZ,EAAqBU,GAAD,IAAS;AACzB,UAAIA,GAAJ,EAAS;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAA+Bd,UAAU,CAACG,EAAtD;AACH,KAND;AAOH;;AAEyB,QAAnBY,mBAAmB,CAACZ,EAAD,EAAI;AAC1B,UAAMF,GAAG,GAAI,wCAAuCE,EAAG,GAAvD;AACA,UAAMD,MAAM,GAAG,EAAf;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYb,GAAZ;AACA,UAAMP,EAAE,CAACsB,GAAH,CAAOf,GAAP,EAAYC,MAAZ,EAAoB,CAACU,GAAD,EAAMK,MAAN,KAAiB;AACtC,UAAIL,GAAJ,EAAS;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,aAAOA,MAAP;AACH,KAPI,CAAN;AAQH;;AAEDC,EAAAA,iBAAiB,CAACC,mBAAD,EAAqB;AAClC,UAAMlB,GAAG,GAAI,yDAAwDkB,mBAAoB,GAAzF;AACA,UAAMjB,MAAM,GAAG,EAAf;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYb,GAAZ;AACAP,IAAAA,EAAE,CAACsB,GAAH,CAAOf,GAAP,EAAYC,MAAZ,EAAoB,CAACU,GAAD,EAAMK,MAAN,KAAiB;AACjC,UAAIL,GAAJ,EAAS;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,aAAOA,MAAP;AACH,KAPD;AAQH;;AAjD2D;;AAoDhEG,MAAM,CAACC,OAAP,GAAiB1B,oBAAjB","sourcesContent":["const InvestmentRepositoryContract = require(\"../repositories_contracts/InvestmentRepositoryContract\");\nconst {v4: uuidv4} = require('uuid');\nconst db = require(\"../database\");\n\n\nclass InvestmentRepository extends InvestmentRepositoryContract {\n    constructor(dbConnection) {\n        super();\n        this.dbConnection = dbConnection;\n    }\n\n    getId() {\n        return uuidv4();\n    }\n\n\n    save(investment) {\n        const sql = \"INSERT INTO investment (id,name,description,interest,starting_amount,final_amount,start_date,end_date) VALUES (?,?,?,?,?,?,?,?)\";\n        const params = [investment.id, investment.name, investment.description, investment.interest, investment.startingAmount, investment.finalAmount, investment.startDate, investment.endDate]\n        db.run(sql, params, (err) => {\n            if (err) {\n                console.log(err)\n                return;\n            }\n            console.log('Sucess register generated: '+ investment.id)\n        })\n    }\n\n     async getInvestmentFromDB(id){\n        const sql = `SELECT * FROM investment where id = '${id}'`;\n        const params = [];\n        console.log(sql);\n        await db.get(sql, params, (err, result) => {\n             if (err) {\n                 console.log(err)\n                 return;\n             }\n             console.log(result)\n             return result\n         })\n    }\n\n    ejercicioSesion07(PARAMETROCUALQUIERA){\n        const sql = `SELECT * FROM investment where PARAMETROCUALQUIERA = '${PARAMETROCUALQUIERA}'`;\n        const params = []\n        console.log(sql)\n        db.get(sql, params, (err, result) => {\n            if (err) {\n                console.log(err)\n                return;\n            }\n            console.log(result)\n            return result\n        })\n    }\n}\n\nmodule.exports = InvestmentRepository"]},"metadata":{},"sourceType":"script"}